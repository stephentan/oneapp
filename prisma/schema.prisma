datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

generator customAttribute {
  // provider is the command to run the generatorHandler function defined above
  provider = "node ./prisma/generators/customAttributeGenerator.js"
  // the output folder for the generated code
  output   = "./generated"
}

enum Role {
  MERCHANT
  ADMIN
}

model SequenceId {
  id      String  @id @default(cuid())
  model   String
  value   Int     @default(1)
  company Company @relation(fields: [companyId], references: [id])

  companyId String

  @@unique([companyId, model])
  @@index([companyId, model])
}

model Company {
  id         String       @id @default(cuid())
  /// {"label": "Name"}
  name       String       @unique
  slug       String       @unique @default("")
  SequenceId SequenceId[]
  User       User[]
}

model User {
  id        String  @id @default(cuid())
  /// {"label": "First Name"}
  firstName String?
  /// {"label": "Last Name"}
  lastName  String?
  /// {"label": "Email", "fieldType": "email"}
  email     String  @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password Password?

  role                   Role         @default(MERCHANT)
  // obsolete to be removed
  isVerified             Boolean      @default(false)
  verificationCode       String       @default("_________")
  /// {"label": "Sign up code"}
  verificationShortCode  String?
  isProfileComplete      Boolean      @default(false)
  onboardingFarthestStep Int?         @default(1)
  primaryCompany         Company?     @relation(fields: [primaryCompanyId], references: [id])
  primaryCompanyId       String?
  FileUpload             FileUpload[]
}

model Password {
  hash   String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model FileUpload {
  id               String  @id @default(uuid())
  path             String
  originalFileName String
  user             User?   @relation(fields: [userId], references: [id])
  userId           String?
  companyId        String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model initDb {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  name      String

  @@index([name])
}
